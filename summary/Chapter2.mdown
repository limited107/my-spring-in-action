# 2. 빈 와이어링(묶기)
 
- 애플리케이션 객체 간의 연관관계 형성 작업 

애플리케이션에서 객체 간의 연관관계 형성 작업이 바로 종속객체 주입(DI) 개념의 핵심이며 이를 보통 와이어링(wiring)이라 한다. 
스프링에서는 빈을 엮는 많은 방법이 있다 시작에 앞서, 스프링 컨테이너를 설정하기 위한 가장 흔한 세 가지 접근에 대해 알아보자. 

## 2.1. 스프링 설정 옵션 알아보기 
 
* XML에서의 명시적 설정 
* 자바에서의 명시적 설정 
* 내재되어 있는 빈을 찾아 자동으로 와이어링하기 

명시적인 설정이 적을수록 좋다. 사용하고자하는 XML 네임스페이스의 기능이 JavaConfig에 없을 경우 XML을 사용한다.
 
## 2.2. 자동으로 빈 와이어링하기 

스프링은 두 가지 방법으로 오토와이어링을 수행한다

* 컴포넌트 스캐닝 - 스프링은 애플리케이션 컨텍스에서 생성되는 빈을 자동으로 발견한다. 
* 오토바이어링 - 스프링은 자동으로 빈 의존성을 충족시킨다. 

다음 예에서는 

1. CompactDisc 클래스를 만들면 스프링이 시작 시에 이를 발견해서 빈으로 생성한다. 
2. CDPalyer 클래스를 만들면 스프링이 이를 발견하고 여기에 CompactDisc 빈을 주입한다. 

### 2.2.3. 컴포넌트 스캐닝을 위한 베이스 패키지 세팅 
* @ComponentScan("패키지명")
* @ComponentScan(basePackages={패키지명})
* @ComponentScan(basePackageClasses={A.class, B.class})

## 2.3. 자바로 빈 와이어링하기 
대부분 컴포넌트 스캐닝과 오토 와이어링을 사용하는 자동 스프링 설정을 선호하지만, 
타사 라이버르러리의 컴포넌트를 애플리케이션으로 와이어하고자 한다면 타사 코드를 수정하지 않고는 @Component, @Autowired를 사용하여 와이어링 할 수 없다. 

이 경우에는 명시적인 설정을 해야한다. 
* 자바의 XML
* JavaConfig 

JavaConfig는 매우 강력하고, 타입세이프하며, 리팩토링 친화적이므로 명시적 설정을 위해 선호하는 옵션이다. 